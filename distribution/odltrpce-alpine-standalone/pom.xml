<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.onap.ccsdk.distribution</groupId>
	<artifactId>distribution-odltrpce-alpine-standalone</artifactId>
	<version>1.1.0-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>transportpce-distribution</name>
	<description>Creates patched opendaylight container with transportpce</description>
	<organization>
		<name>Opendaylight</name>
	</organization>

	<properties>
		<!-- <base.image.version>3.8</base.image.version> -->
		<!-- <base.image.repo>alpine:${base.image.version}</base.image.repo> -->
		<base.image.repo>adoptopenjdk/openjdk11:alpine</base.image.repo>

		<image.name>odl/transportpce</image.name>
		<!-- karaf neon SR3 -->
		<odl.karaf.version>0.12.1</odl.karaf.version>
		<!-- Used by Groovy script -->
		<trpce.project.version>${project.version}</trpce.project.version>
		<trpce.build.timestamp>${maven.build.timestamp}</trpce.build.timestamp>
		<!-- Used by Dockerfile -->
		<trpce.features.version>${project.version}</trpce.features.version>
		<!-- Below not used -->
		<docker.buildArg.https_proxy>${https_proxy}</docker.buildArg.https_proxy>
		<maven.build.timestamp.format>yyyyMMdd'T'HHmmss'Z'</maven.build.timestamp.format>
		<opendaylight.root>opt/opendaylight</opendaylight.root>
		<docker.push.phase>deploy</docker.push.phase>
		<docker.verbose>true</docker.verbose>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.opendaylight.transportpce</groupId>
			<artifactId>transportpce-installer</artifactId>
			<version>${trpce.features.version}</version>
			<classifier>repo</classifier>
			<type>zip</type>
		</dependency>
	</dependencies>
	<build>
		<extensions>
			<extension>
				<!-- this extension is required by wagon in order to pass the proxy -->
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-http-lightweight</artifactId>
				<version>2.2</version>
			</extension>
		</extensions>
		<plugins>
			<plugin>
				<groupId>org.codehaus.groovy.maven</groupId>
				<artifactId>gmaven-plugin</artifactId>
				<version>1.0</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<source>${basedir}/src/main/groovy/TagVersion.groovy</source>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<id>copy-dockerfile</id>
						<goals>
							<goal>copy-resources</goal>
						</goals><!-- here the phase you need -->
						<phase>validate</phase>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/docker</directory>
									<includes>
										<include>Dockerfile</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-scripts</id>
						<goals>
							<goal>copy-resources</goal>
						</goals><!-- here the phase you need -->
						<phase>validate</phase>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage/opt/opendaylight/bin</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources</directory>
									<includes>
										<include>*.sh</include>
									</includes>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<!-- had to overwrite version because of a filelength bug during in unpack 
					goal which cuts filenames -->
				<version>3.1.1</version>
				<executions>
					<execution>
						<id>unpack features</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>unpack-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage</outputDirectory>
							<excludeTransitive>true</excludeTransitive>
							<overWriteReleases>true</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
						</configuration>
					</execution>
					<execution>
						<id>copy-with-alternalte-repo-2</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.apache.aries.quiesce</groupId>
									<artifactId>org.apache.aries.quiesce.manager</artifactId>
									<version>1.0.0</version>
									<overWrite>true</overWrite>
								</artifactItem>
							</artifactItems>
							<localRepositoryDirectory>${project.build.directory}/docker-stage/system</localRepositoryDirectory>
						</configuration>
					</execution>
					<execution>
						<id>get-odl-distribution</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.opendaylight.integration</groupId>
									<artifactId>karaf</artifactId>
									<version>${odl.karaf.version}</version>
									<type>tar.gz</type>
									<overWrite>true</overWrite>
									<outputDirectory>${basedir}/target/docker-stage/odl
									</outputDirectory>
								</artifactItem>
							</artifactItems>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.28.0</version>
				<inherited>false</inherited>
				<configuration>
					<images>
						<image>
							<name>${image.name}</name>
							<build>
								<cleanup>try</cleanup>
								<dockerFileDir>${basedir}/target/docker-stage</dockerFileDir>
								<tags>
									<tag>${project.docker.latestminortag.version}</tag>
									<tag>${project.docker.latestfulltag.version}</tag>
									<tag>${project.docker.latesttagtimestamp.version}</tag>
									<tag>${image.version}</tag>
								</tags>
							</build>
						</image>
					</images>
				</configuration>
				<executions>
					<execution>
						<id>generate-images</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>

					<execution>
						<id>push-images</id>
						<phase>${docker.push.phase}</phase>
						<goals>
							<goal>build</goal>
							<goal>push</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
